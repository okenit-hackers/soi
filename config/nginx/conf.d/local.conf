# first we declare our upstream server, which is our Gunicorn application
upstream soi_server {
 # docker will automatically resolve this to the correct address
 # because we use the same name as the service: "web-app"
 server web-app:8000;
}

# now we declare our main server
server {

 # listen 80;
 listen 443 ssl;

 server_name soi;

 ssl_certificate /etc/nginx/ssl/nginx.pem;
 ssl_certificate_key /etc/nginx/ssl/nginx.key;

 ssl_session_timeout 5m;
 ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
 ssl_ciphers HIGH+kEECDH+AESGCM:HIGH+kEECDH:HIGH+kEDH:HIGH:!aNULL;
 ssl_prefer_server_ciphers on;

 client_max_body_size 3048m;
 proxy_connect_timeout 90s;
 proxy_send_timeout 120s;
 proxy_read_timeout 120s;

 location / {
  # everything is passed to Gunicorn
  proxy_pass http://soi_server/;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  # https://stackoverflow.com/questions/22279893/djangorestframework-https-links-with-routers-and-viewsets
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header Host $host;
  proxy_redirect off;
 }

 location /static/ {
  alias /opt/soi_app/static/;
 }

 location /media/ {
  alias /opt/soi_app/media/;
 }

 location /elasticsearch/ {
  proxy_pass http://elasticsearch-internal:9200;
 }

 location /zabbix/ {
  rewrite ^/zabbix(.*)$ $1 break;
  proxy_pass http://zabbix-nginx:8080;
 }

 location /kibana/ {
  rewrite ^/kibana(.*)$ $1 break;
  proxy_pass http://kibana-internal:5601;
 }

 location /kibana-ext/ {
  rewrite ^/kibana-ext(.*)$ $1 break;
  proxy_pass http://kibana-external:5601;
 }
}