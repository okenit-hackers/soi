# Generated by Django 3.2 on 2021-07-14 13:23

import django.core.validators
from django.db import migrations, models
import django_fsm


class Migration(migrations.Migration):
 dependencies = [
  ('lemmings_app', '0048_auto_20210713_1356'),
 ]

 operations = [
  migrations.AlterField(
   model_name='botaccount',
   name='create_progress',
   field=django_fsm.FSMField(choices=[('START', 'START'), ('BIO_GENERATED', 'BIO_GENERATED'),
             ('REQUIRED_ACCOUNT_REGISTERED', 'REQUIRED_ACCOUNT_REGISTERED'),
             ('PHONE_RESERVED', 'PHONE_RESERVED'),
             ('REGISTERED_IN_SERVICE', 'REGISTERED_IN_SERVICE'),
             ('ACCOUNT_SAVED', 'ACCOUNT_SAVED'),
             ('ACCOUNT_LOGGED_IN', 'ACCOUNT_LOGGED_IN'), ('AUTH_SAVED', 'AUTH_SAVED'),
             ('SUCCESS', 'SUCCESS'), ('ERROR_SERVICE', 'ERROR_SERVICE'),
             ('ERROR_SUB_SERVICE', 'ERROR_SUB_SERVICE'),
             ('ERROR_PHONE', 'ERROR_PHONE'), ('ERROR_DB', 'ERROR_DB')],
          default='START', max_length=50, protected=True, verbose_name='create progress'),
  ),
  migrations.AlterField(
   model_name='botaccount',
   name='password',
   field=models.CharField(blank=True, help_text='Пароль учетной записи', max_length=128,
          verbose_name='password'),
  ),
  migrations.AlterField(
   model_name='botaccount',
   name='service',
   field=models.CharField(
    choices=[('VK', 'vk'), ('TWITTER', 'twitter'), ('INSTAGRAM', 'instagram'), ('FACEBOOK', 'facebook'),
       ('MY_WORLD', 'my_world'), ('PROTON_MAIL', 'proton_mail'), ('YAHOO_MAIL', 'yahoo_mail'),
       ('CLASSMATES', 'classmates'), ('REDDIT', 'reddit'), ('LINKEDIN', 'linkedin'),
       ('YANDEX', 'yandex'), ('MYSPACE', 'myspace'), ('TELEGRAM', 'telegram')], max_length=18,
    validators=[django.core.validators.MinLengthValidator(1)], verbose_name='resource name'),
  ),
  migrations.AlterField(
   model_name='botaccount',
   name='username',
   field=models.CharField(blank=True, help_text='Уникальный идентификатор в сервисе', max_length=128,
          verbose_name='username'),
  ),
  migrations.AlterUniqueTogether(
   name='botaccount',
   unique_together=set(),
  ),
  migrations.AddConstraint(
   model_name='botaccount',
   constraint=models.UniqueConstraint(fields=('service', 'username'), name='unique_username_in_service'),
  ),
  migrations.AddConstraint(
   model_name='botaccount',
   constraint=models.CheckConstraint(check=models.Q(_negated=True, service=''), name='non_empty_service'),
  ),
 ]