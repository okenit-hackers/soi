"""
Django settings for soi project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import re
import sysconfig
from pathlib import Path

import pkg_resources

from soi_app.exceptions import SoiConfigException

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SOI_SECRET_KEY', ')pyvr#vqnm@ub-0%04vpp)!hvb&=@$p)*4yq=%x53x63ry%e4#')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').casefold().strip() == 'true'

# Application definition
EXTERNAL_APPS = [
 # insert external apps here
 # Используется для объявления приложений работающих только на внешнем воркере
]

INSTALLED_APPS = [
 'django.contrib.admin',
 'django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.messages',
 'django.contrib.staticfiles',
 'corsheaders',
 'rest_framework',
 'rest_framework.authtoken',
 'stereotypes_generator',
 'anon_app',
 'django_filters',
 'django_fsm',
 'django_fsm_log',
 'lemmings_app',
 'phonenumber_field',
 'ledger_app',
 'django_celery_beat',
 'notifications_app',
 *EXTERNAL_APPS,
]

MIDDLEWARE = [
 'django.middleware.security.SecurityMiddleware',
 'django.contrib.sessions.middleware.SessionMiddleware',
 'corsheaders.middleware.CorsMiddleware',
 'django.middleware.common.CommonMiddleware',
 'django.middleware.csrf.CsrfViewMiddleware',
 'django.contrib.auth.middleware.AuthenticationMiddleware',
 'django.contrib.messages.middleware.MessageMiddleware',
 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'soi_app.urls'


TEMPLATES = [
 {
  'BACKEND': 'django.template.backends.django.DjangoTemplates',
  'DIRS': [os.path.join(BASE_DIR, 'template'), os.path.join(BASE_DIR, 'soi_app/templates'), os.path.join(BASE_DIR, 'notifications_app/templates'),],
  'APP_DIRS': True,
  'OPTIONS': {
   'context_processors': [
    'django.template.context_processors.debug',
    'django.template.context_processors.request',
    'django.contrib.auth.context_processors.auth',
    'django.contrib.messages.context_processors.messages',
   ],
   'libraries': {
    'Ajax_reload': 'soi_app.templatetags.Ajax_reload',
    'Notifications_tag': 'notifications_app.templatetags.Notifications_tag',
   }
  },

 },
]


WSGI_APPLICATION = 'soi_app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

EXTERNAL_SECOND_PG_HOST = os.environ.get('EXTERNAL_SECOND_PG_HOST', 'localhost')
EXTERNAL_SECOND_PG_PORT = os.environ.get('EXTERNAL_SECOND_PG_PORT', '2345')

SECOND_PG_HOST = os.environ.get('SECOND_PG_HOST', 'localhost')
SECOND_PG_PORT = os.environ.get('SECOND_PG_PORT', '5432')

DATABASES = {
 'default': {
  'ENGINE': 'django.db.backends.postgresql_psycopg2',
  'NAME': os.environ.get('SOI_PG_DB', 'soi'),
  'USER': os.environ.get('SOI_PG_USER', 'soi'),
  'PASSWORD': os.environ.get('SOI_PG_PASSWORD', 'P@ssw0rd'),
  'HOST': os.environ.get('SOI_PG_HOST', 'localhost'),
  'PORT': os.environ.get('SOI__PG_PORT', '5432'),
 },
 'external_soi': {
  'ENGINE': 'django.db.backends.postgresql_psycopg2',
  'NAME': os.environ.get('SOI_EXTERNAL_PG_DB', 'external_soi'),
  'USER': os.environ.get('SOI_EXTERNAL_PG_USER', 'external_soi'),
  'PASSWORD': os.environ.get('SOI_EXTERNAL_PG_PASSWORD', 'P@ssw0rd'),
  'HOST': SECOND_PG_HOST,
  'PORT': SECOND_PG_PORT,
 }
}

DATABASE_ROUTERS = ['soi_app.dbrouter.SoiRouter']
# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
 {
  'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
 },
 {
  'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
 },
 {
  'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
 },
 {
  'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
 },
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

base_static_dir = base_media_dir = '/opt/soi_app'

STATIC_ROOT = os.path.join(base_static_dir, 'static/')

MEDIA_ROOT = os.path.join(base_media_dir, 'media/')
MEDIA_URL = '/media/'

LOGIN_URL = '/api-auth/login/'

LOGIN_REDIRECT_URL = '/chain/'

# https://stackoverflow.com/questions/22279893/djangorestframework-https-links-with-routers-and-viewsets
if not DEBUG:
 SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

LOGGING = {
 'version': 1,
 'disable_existing_loggers': False,
 'formatters': {
  'verbose': {
   'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
   'style': '{',
  },
  'simple': {
   'format': '{levelname} {message}',
   'style': '{',
  },
 },
 'handlers': {
  'console': {
   'level': 'INFO',
   'class': 'logging.StreamHandler',
   'formatter': 'verbose'
  },
  'logstash_internal': {
   'level': 'INFO',
   'class': 'logstash.TCPLogstashHandler',
   'host': os.environ.get('SOI_LOG_INTERNAL_HOST', 'localhost'),
   'port': os.environ.get('SOI_LOG_INTERNAL_PORT', '25000'),
   'version': 1,
   # Version of logstash event schema. Default value: 0 (for backward compatibility of the library)
   'message_type': 'logstash', # 'type' field in logstash message. Default value: 'logstash'.
   'fqdn': False, # Fully qualified domain name. Default value: false.
   'tags': ['soi'], # list of tags. Default: None.
  },
 },
 'loggers': {
  'django': {
   'handlers': ['console'],
   'level': 'INFO',
   'propagate': True,
  },
  'anon_app': {
   'handlers': ['console', 'logstash_internal'],
   'level': 'INFO',
   'propagate': True,
  },
 },
}

# информация для подключения удалённых контейнеров к logstash
LOGSTASH_EXTERNAL_HOST = 'logstash-external' # адрес в рамках сервера
LOGSTASH_EXTERNAL_PORT = 5000
LOGSTASH_EXTERNAL_FILEBEAT_PORT = 5044
LOGSTASH_EXTERNAL_CONF = {
 'host': os.environ.get('SOI_LOG_EXTERNAL_HOST', 'openssh'), # адрес в рамках контейнера
 'port': os.environ.get('SOI_LOG_EXTERNAL_PORT', '5000'),
}

LOGSTASH_EXTERNAL_FILEBEAT_CONF = {
 'host': os.environ.get('SOI_LOG_EXTERNAL_FILEBEAT_HOST', 'openssh'), # адрес в рамках контейнера
 'port': os.environ.get('SOI_LOG_EXTERNAL_FILEBEAT_PORT', '5044'),
}

LOGSTASH_INTERNAL_CONF = {
 'host': os.environ.get('SOI_LOG_INTERNAL_HOST', 'localhost'),
 'port': os.environ.get('SOI_LOG_INTERNAL_PORT', '25000'),
}

REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')

REDIS_PORT = os.environ.get('REDIS_PORT', '6379')

REDIS_BROCKER_DATABASE_NUMBER = os.environ.get('REDIS_BROCKER_DATABASE_NUMBER', '0')

REDIS_BACKEND_DATABASE_NUMBER = os.environ.get('REDIS_BACKEND_DATABASE_NUMBER', '1')

RABBITMQ_HOST = os.environ.get('RABBITMQ_HOST', 'localhost')
RABBITMQ_PORT = os.environ.get('RABBITMQ_PORT', '5672')

CELERY_BROKER_URL = f'amqp://{RABBITMQ_HOST}:{RABBITMQ_PORT}/'

INTERNAL_CELERY_QUEUE_NAME = os.environ.get('INTERNAL_CELERY_QUEUE_NAME', 'internal_celery')
INTERNAL_CELERY_BOTFARM_QUEUE_NAME = os.environ.get('INTERNAL_CELERY_BOTFARM_QUEUE_NAME', 'internal_celery_botfarm')

DEFAULT_TIMEOUT_WORKER = int(os.environ.get('SOI_DEFAULT_TIMEOUT_WORKER', 10))

try:
 NEEDED_TEMPLATES = os.environ.get('ZABBIX_NEEDED_TEMPLATES').split(',')
except AttributeError:
 NEEDED_TEMPLATES = [
  'Linux CPU by Zabbix agent active', 'Linux filesystems by Zabbix agent active',
  'Linux memory by Zabbix agent active', 'Linux network interfaces by Zabbix agent active'
 ]

TIMEOUT_BEFORE_START_AUTH = int(os.environ.get('SOI_TIMEOUT_BEFORE_START_AUTH', 14400))
EXPIRE_TIME_FOR_AUTH_TASKS = int(os.environ.get('SOI_EXPIRE_TIME_FOR_AUTH_TASKS', 36000))

APP_IMAGES_PATH = os.environ.get('APP_IMAGES_PATH', '/tmp/')

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# True - сои работает сам по себе, False - сои установлен как пакет
AM_I_LONELY = 'soi-okenit' not in {pkg.key for pkg in pkg_resources.working_set}

DATA_PREFIX = BASE_DIR if AM_I_LONELY else sysconfig.get_paths()['purelib']

ALTERNATIVE_BUILD_FILE_NAME = os.environ.get('ALTERNATIVE_BUILD_FILE_NAME', 'sos_web-app.tar')

SCRAPER_SELENIUM_IDE_TEMPLATES_PACKAGE_PREFIX = os.environ.get(
 'FLGR_SCRAPER_SELENIUM_IDE_TEMPLATES_PACKAGE_PREFIX',
 'selenium_ide_templates'
)

if re.match('^[a-zA-Z_][a-zA-Z0-9_]*$', SCRAPER_SELENIUM_IDE_TEMPLATES_PACKAGE_PREFIX) is None:
 raise SoiConfigException(
  'FLGR_SCRAPER_SELENIUM_IDE_TEMPLATES_PACKAGE_PREFIX',
  SCRAPER_SELENIUM_IDE_TEMPLATES_PACKAGE_PREFIX,
  'wrong package, you can use only [a-zA-Z0-9_] chars'
 )

WORKDIR = os.environ.get(
 'FLGR_WORKDIR',
 '/opt'
)

SCRAPER_SELENIUM_IDE_TEMPLATES_DIR = os.path.join(WORKDIR, SCRAPER_SELENIUM_IDE_TEMPLATES_PACKAGE_PREFIX)

REST_FRAMEWORK = {
 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
 'PAGE_SIZE': 10,

 'DEFAULT_AUTHENTICATION_CLASSES': [
  'rest_framework.authentication.TokenAuthentication', # для программных запросов
  'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # для запросов пользователей через браузер
  'rest_framework.authentication.SessionAuthentication', # для запросов пользователей через браузер
  'rest_framework.authentication.BasicAuthentication' # для запросов пользователей через браузер
 ],

 'DEFAULT_FILTER_BACKENDS': [
  'rest_framework.filters.SearchFilter',
  'django_filters.rest_framework.DjangoFilterBackend',
 ]
}

JWT_AUTH = {
 'JWT_ALLOW_REFRESH': True
}

CORS_ALLOW_METHODS = ['DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT']

try:
 CORS_ORIGIN_WHITELIST = os.environ.get('SOI_CORS_ORIGIN_WHITELIST').split(' ')
except AttributeError:
 CORS_ORIGIN_WHITELIST = []

try:
 ALLOWED_HOSTS = os.environ.get('SOI_ALLOWED_HOSTS').split(' ')
except AttributeError:
 ALLOWED_HOSTS = []

ANSIBLE_PLAYBOOK_DIR: Path = Path(DATA_PREFIX, 'anon_app', 'ansible-playbooks')

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (
 os.path.join(DATA_PREFIX, "anon_app/locale"),
 os.path.join(DATA_PREFIX, "lemmings_app/locale"),
 os.path.join(DATA_PREFIX, "ledger_app/locale"),
 # os.path.join(DATA_PREFIX, "locale"),
)

CELERY_IMPORTS = ('stereotypes_generator.behavior_emulator.tasks',)

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

CELERY_TASK_DEFAULT_PRIORITY = os.environ.get('CELERY_TASK_DEFAULT_PRIORITY', '50')
CELERY_TASK_DEFAULT_PRIORITY = int(
 CELERY_TASK_DEFAULT_PRIORITY
 if CELERY_TASK_DEFAULT_PRIORITY.isdecimal() else 50
)

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240
SOS_PROXY_CHECK_URL = os.environ.get('SOS_PROXY_CHECK_URL', 'https://www.example.com/')
SOS_PROXY_CHECK_LOCATION_URL = os.environ.get('SOS_PROXY_CHECK_LOCATION_URL', 'http://ipinfo.io/json')

MAX_NUMBER_AFTER_POINT = 24

COUNT_CHECK_PROXIES_BEFORE_START = int(os.environ.get('SOS_COUNT_CHECK_PROXIES_BEFORE_START', 10))